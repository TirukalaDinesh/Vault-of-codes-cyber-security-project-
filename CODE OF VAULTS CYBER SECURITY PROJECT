import tkinter as tk
from tkinter import messagebox
from cryptography.fernet import Fernet
import random
import string

# Generate a key for encryption
key = Fernet.generate_key()
cipher_suite = Fernet(key)

# GUI Setup
root = tk.Tk()
root.title("Vault of Codes")
root.geometry("400x300")
root.configure(bg='purple')

# Database Setup
user_accounts = {}

# Function to encrypt and store a password
def encrypt_password(password):
    encrypted_password = cipher_suite.encrypt(password.encode())
    return encrypted_password

# Function to decrypt a password
def decrypt_password(encrypted_password):
    decrypted_password = cipher_suite.decrypt(encrypted_password).decode()
    return decrypted_password

# Function to generate a strong, random password
def generate_password(length=12, complexity=3):
    if complexity < 1 or complexity > 3:
        messagebox.showerror("Error", "Complexity should be between 1 and 3")
        return

    if complexity == 1:
        characters = string.ascii_letters
    elif complexity == 2:
        characters = string.ascii_letters + string.digits
    else:
        characters = string.ascii_letters + string.digits + string.punctuation

    password = ''.join(random.choice(characters) for i in range(length))
    return password

# Function to check password strength
def check_password_strength(password):
    # Implement your password strength checking logic here
    # You can check for length, presence of uppercase/lowercase, digits, and special characters
    pass

# Function to save a password
def save_password():
    website = website_entry.get()
    username = username_entry.get()
    password = password_entry.get()

    if not website or not username or not password:
        messagebox.showerror("Error", "Please fill in all fields")
        return

    encrypted_password = encrypt_password(password)
    user_accounts[website] = {'username': username, 'password': encrypted_password}
    messagebox.showinfo("Success", "Password saved successfully")

# Function to retrieve and display saved passwords
def display_saved_passwords():
    saved_passwords_text.delete(1.0, tk.END)  # Clear the text widget
    for website, account_info in user_accounts.items():
        decrypted_password = decrypt_password(account_info['password'])
        saved_passwords_text.insert(tk.END, f"Website: {website}\nUsername: {account_info['username']}\nPassword: {decrypted_password}\n\n")

# GUI Elements
website_label = tk.Label(root, text="Website:", bg='yellow', fg='black')
website_label.pack()

website_entry = tk.Entry(root)
website_entry.pack()

username_label = tk.Label(root, text="Username:", bg='black', fg='white')
username_label.pack()

username_entry = tk.Entry(root)
username_entry.pack()

password_label = tk.Label(root, text="Password:", bg='orange', fg='white')
password_label.pack()

password_entry = tk.Entry(root)
password_entry.pack()

save_button = tk.Button(root, text="Save Password", command=save_password, bg='black', fg='white')
save_button.pack()

generate_button = tk.Button(root, text="Generate Password", command=lambda: password_entry.insert(tk.END, generate_password()), bg='black', fg='white')
generate_button.pack()

display_saved_button = tk.Button(root, text="Display Saved Passwords", command=display_saved_passwords, bg='black', fg='white')
display_saved_button.pack()

saved_passwords_text = tk.Text(root, height=8, width=40, bg='black', fg='white')
saved_passwords_text.pack()

root.mainloop()
